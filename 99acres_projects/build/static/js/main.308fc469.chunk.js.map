{"version":3,"sources":["components/popup.js","components/edit.js","components/dropdown.js","components/test.js","App.js","components/table2.js","serviceWorker.js","index.js"],"names":["Popup","props","popupCallback","bind","dataFromProject","console","log","this","callbackFromEdit","className","currentRow","closePopup","callbackFromPopup","updateType","React","Component","Project","state","projectValues","dataValidator","initializeValidator","updateCalled","handleInputChange","handleupdate","handleReset","submit","validate","isValueValidNumber","completeDataValid","temp","allKeys","Object","keys","i","length","event","changedKey","target","name","changedValue","value","setState","prevState","original","fieldName","key","test","toLowerCase","endsWith","markFieldValid","markFieldInvalid","isNaN","returnValue","arr","url","JSON","stringify","fetch","method","headers","body","then","response","ok","Error","statusText","alert","catch","error","map","k","id","type","onBlur","onChange","class","href","onClick","Edit","showPopup","togglePopup","editCallback","deleteID","datafromPopup","callbackFromTable","temp2","rowData","text","Dropdown","Table1","handleDeleteButtonClick","selectedRow","res","createCustomDeleteButton","btnText","btnContextual","btnGlyphicon","handleInsertButtonClick","toggleCreatePopup","createCustomInsertButton","renderSizePerPageDropDown","n","idx","isActive","currSizePerPage","changeSizePerPage","handleChange","selectedOption","results","rowClickedIndex","showCreatePopup","fetchResults","tableCallback","onRowClick","handleRowSelect","initializeNewData","json","p","records","row","columnIndex","rowIndex","isSelected","e","dataFromEdit","newResults","options","deleteBtn","insertBtn","sizePerPageDropDown","selectRow","mode","clickToSelect","onSelect","rel","integrity","crossOrigin","keyField","data","insertRow","deleteRow","search","searchPlaceholder","cellEdit","pagination","column","dataField","editable","dataFormat","cell","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.308fc469.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles1.css';\r\n\r\n\r\n\r\n\r\n//import { ReactComponent } from '*.svg';\r\n\r\nclass Popup extends React.Component {\r\n constructor(props){\r\n   super(props);\r\n   \r\n   \r\nthis.popupCallback=this.popupCallback.bind(this)\r\n  }\r\n   \r\n   popupCallback(dataFromProject){\r\n     console.log(\"inside popup callback\")\r\n     console.log(dataFromProject)\r\n     //props name 'callbackFromEdit' has to be made moe generic\r\n     this.props.callbackFromEdit(dataFromProject)//function call\r\n   }\r\n\r\n   \r\n \r\n\r\n \r\nrender() {\r\n    return (\r\n      <div className='popup'>\r\n        <div className='popup_inner'>\r\n          {/* <h1>{this.props.text}</h1> */}\r\n          <Project currentRow = {this.props.currentRow}  closePopup={this.props.closePopup} callbackFromPopup = {this.popupCallback} updateType = {this.props.updateType}/>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass Project extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    \r\n\r\n    console.log(\"inside project constructor\")\r\n     \r\n     \r\n    \r\n    this.state = {\r\n      projectValues : this.props.currentRow,\r\n      dataValidator : this.initializeValidator,\r\n      updateCalled: false\r\n    }\r\n\r\n    \r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n    this.handleupdate = this.handleupdate.bind(this)\r\n    this.handleReset = this.handleReset.bind(this)\r\n    this.submit = this.submit.bind(this)\r\n    this.validate = this.validate.bind(this)\r\n    this.isValueValidNumber = this.isValueValidNumber.bind(this)\r\n    //this.isValueValidString = this.isValueValidString.bind(this)\r\n    this.completeDataValid = this.completeDataValid.bind(this)\r\n    \r\n  }\r\n\r\n  initializeValidator(){\r\n    let temp = {}\r\n    let allKeys = Object.keys(this.props.currentRow)\r\n\r\n    for(let i=0;i<allKeys.length;i++){\r\n     temp[allKeys[i]+\"_valid\"]=true;\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  handleInputChange(event){\r\n   \r\n    let changedKey = event.target.name;\r\n    let changedValue = event.target.value;\r\n\r\n     //let changedState =this.state.projectValues;  // creating copy of state variable\r\n     //changedState[changedKey] =changedValue;                     \r\n     this.setState(prevState => ({\r\n      projectValues: {                   // object that we want to update\r\n          ...prevState.projectValues,    // keep all other key-value pairs\r\n          [changedKey]: changedValue       // update the value of specific key\r\n          \r\n      }\r\n      \r\n  }))\r\n  \r\n  \r\n  }\r\n\r\n  handleupdate(event){\r\n    console.log(\"inside handle updated\")\r\n    this.submit()\r\n    // this.props.callbackFromPopup(this.state.projectValues)\r\n    // this.props.closePopup()\r\n  }\r\n\r\n  handleReset(event){\r\n    let original = this.props.currentRow\r\n    this.setState({projectValues: original})\r\n    this.setState({dataValidator: this.initializeValidator})\r\n    this.setState({updateCalled:false})\r\n\r\n    \r\n  }\r\n\r\n  markFieldInvalid(fieldName){\r\n    this.setState(prevState => ({\r\n      dataValidator: {                   // object that we want to update\r\n    \r\n        ...prevState.dataValidator,    // keep all other key-value pairs\r\n          [fieldName+\"_valid\"]: false       // update the value of specific key\r\n      }\r\n      \r\n  }))\r\n  }\r\n\r\n  markFieldValid(fieldName){\r\n    this.setState(prevState => ({\r\n      dataValidator: {                   // object that we want to update\r\n          ...prevState.dataValidator,    // keep all other key-value pairs\r\n          [fieldName+\"_valid\"]: true       // update the value of specific key\r\n      }\r\n      \r\n  }))\r\n  }\r\n\r\n\r\n\r\n  validate(event){\r\n    console.log(\"inside validate\")\r\n    let key = event.target.name\r\n    let value = event.target.value\r\n    \r\n    var alphanumeric_regex = /^[a-z0-9 ]+$/i\r\n\r\n    if(!alphanumeric_regex.test(value)){\r\n     this.markFieldInvalid(key)\r\n\r\n    }else {\r\n      if(key.toLowerCase().endsWith(\"id\")){\r\n        var isValidNumber = this.isValueValidNumber(value);\r\n      if(!isValidNumber){\r\n          console.log(\"inside markfieldInvalid\")\r\n          this.markFieldInvalid(key)\r\n      } else {\r\n           this.markFieldValid(key)  \r\n      }\r\n              \r\n    }else{\r\n      this.markFieldValid(key)\r\n    }\r\n    \r\n  } \r\n  \r\n}\r\n\r\n  // isValueValidString(event){\r\n   \r\n  // }\r\n\r\n  isValueValidNumber(value){\r\n    return !isNaN(value);\r\n      \r\n      \r\n  }\r\n   completeDataValid(){\r\n    console.log(\"inside complete data valid\")\r\n     var returnValue = true\r\n    var arr = Object.keys(this.state.dataValidator)\r\n     for(var i = 0; i<= arr.length-1; i++){\r\n       if(this.state.dataValidator[arr[i]] == false)  {\r\n        returnValue = false\r\n          \r\n        }\r\n     }\r\n     \r\n     return returnValue;\r\n     \r\n   }\r\n\r\n   \r\n  \r\n  \r\n\r\n  submit(event){\r\n\r\n    \r\n    this.setState({updateCalled:true})\r\n    let updateUrl = 'http://localhost/project-details-backend/api/project/update.php';\r\n    let createUrl = 'http://localhost/project-details-backend/api/project/create.php';\r\n    let url = this.props.updateType==\"CREATE\"? createUrl:updateUrl \r\n    \r\n    \r\n   \r\n   if(this.completeDataValid()){\r\n    console.log(\"going to send data\")\r\n    console.log(JSON.stringify(this.state.projectValues))\r\n    fetch(url,{\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(this.state.projectValues)\r\n    })\r\n    .then(function(response) {\r\n      if (!response.ok) {\r\n          throw Error(response.statusText);\r\n      }\r\n      return response;\r\n  }).then(function(response) {\r\n      alert(\"the project was successfully updated\")\r\n      \r\n    \r\n  }).catch(function(error) {\r\n      alert(\"Sorry, there was some error with the input, try again\")\r\n      console.log(error)\r\n\r\n  });\r\n\r\n   }\r\n  \r\n}\r\n  \r\n\r\nrender() {\r\n\r\n  \r\n\r\n\r\n    return(\r\n      \r\n      <div className = \"list-container\">\r\n      \r\n        <ul className = \"list_item\">\r\n          {\r\n            \r\n            Object.keys(this.props.currentRow).map( (k) => {\r\n              \r\n              return <li key = {k}> {k}  : <input id = {k} type =\"text\" name={k}  onBlur = {this.validate} value ={this.state.projectValues[k]} onChange = {this.handleInputChange}></input> \r\n              {this.state.dataValidator[k+\"_valid\"] == false ? <span class = \"err\" id ={k+\"_error\"} >Error</span> : null}\r\n              \r\n                \r\n              </li>\r\n\r\n              \r\n              \r\n              \r\n            } )\r\n            \r\n          }\r\n\r\n          {this.completeDataValid() == true || !this.state.updateCalled ? null: <span class = \"error\" >Sorry there was some error, Try Again</span>}\r\n          \r\n \r\n        </ul>\r\n        \r\n        \r\n\r\n        <div className = \"row\">\r\n          {/* <div className = \"column\">\r\n          <a href=\"#\" onClick={this.submit} >Submit</a>\r\n          </div> */}\r\n          <div className = \"column\">\r\n          <a href=\"#\" onClick={this.handleReset} >Reset</a>\r\n          </div>\r\n          <div className = \"column\" >\r\n          <a href=\"#\" onClick={this.handleupdate} >Update</a>\r\n          </div>\r\n          <div className = \"column\" >\r\n          <a href=\"#\" onClick={this.props.closePopup} >Close</a>\r\n          </div>\r\n         </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Popup;","\r\nimport React, { Component } from 'react';\r\nimport Popup from './popup';\r\n\r\nclass Edit extends Component {\r\n\r\n    constructor(props){\r\n    super(props);\r\n    this.state = { showPopup: false,\r\n        updateType : \"UPDATE\"  \r\n     };\r\n\r\n     this.togglePopup = this.togglePopup.bind(this);\r\n     this.editCallback = this.editCallback.bind(this);\r\n     this.deleteID = this.deleteID.bind(this)\r\n     \r\n\r\n    }\r\n\r\n    editCallback(datafromPopup){\r\n      console.log('inside edit callback')\r\n      console.log(datafromPopup)\r\n      this.props.callbackFromTable(datafromPopup)\r\n    }\r\n  //event handler for on click event of edit button\r\n    togglePopup() {\r\n     this.setState({\r\n       showPopup: !this.state.showPopup\r\n     });\r\n   }\r\n\r\n   deleteID() {\r\n     let temp2 = {};\r\n\r\n     let allKeys = Object.keys(this.props.rowData)\r\n        for(let i=0; i<allKeys.length; i++){\r\n          if(allKeys[i] != \"ID\" && allKeys[i] !== \"edit\" && allKeys[i] !== \"dropdown\"){\r\n            temp2[allKeys[i]] = this.props.rowData[allKeys[i]];\r\n   }\r\n  }\r\n  return temp2;\r\n}\r\n\r\n   \r\n  \r\n    render() {\r\n    \r\n      return (\r\n        <div>\r\n         {/* <h1> Simple Popup Example In React Application </h1> */}\r\n         <button onClick={this.togglePopup}> Edit</button>\r\n         {this.state.showPopup ?\r\n           <Popup\r\n            text='Click \"Close Button\" to hide popup'\r\n            closePopup={this.togglePopup}\r\n            currentRow = {this.deleteID()}\r\n            updateType = {this.state.updateType}\r\n            callbackFromEdit ={this.editCallback}\r\n            \r\n           />\r\n           : null\r\n         }\r\n        </div>\r\n  \r\n      );\r\n    }\r\n  }\r\n\r\n  export  {Edit};","import React, { Component } from 'react';\r\n//import MDBSelect  from \"./mdbreact\";\r\n\r\nclass Dropdown extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {}\r\n        }\r\n        \r\n          render() {\r\n              \r\n            return (\r\n              <div>\r\n                <select>\r\n                    <option>SELECT</option>\r\n                    <option value=\"1\">Option 1</option>\r\n                    <option value=\"2\">Option 2</option>\r\n                    <option value=\"3\">Option 3</option>\r\n                </select>\r\n\r\n              </div>\r\n            );\r\n          }\r\n        \r\n    }        \r\n        \r\nexport {Dropdown};","import React, { Component } from 'react';\r\nimport {BootstrapTable, \r\n       TableHeaderColumn, DeleteButton, InsertButton, SizePerPageDropDown} from 'react-bootstrap-table';\r\nimport './Table.css';\r\nimport './react-bootstrap-table.css';\r\nimport './react-bootstrap-table.min.css';\r\nimport {Edit} from './edit';\r\nimport Popup from './popup';\r\nimport {Dropdown} from './dropdown';\r\n\r\n\r\n\r\n\r\n\r\nclass NameEditor extends React.Component {\r\n  constructor(props) { \r\n    console.log('printing props of nameeditor component')\r\n    console.log(props);\r\n    super(props);\r\n    this.updateData = this.updateData.bind(this);\r\n    this.state = {\r\n      name: props.defaultValue,\r\n      open: true\r\n    };\r\n  }\r\n  focus() {\r\n    this.refs.inputRef.focus();\r\n    \r\n  }\r\n  updateData() {\r\n    this.props.onUpdate(this.state.name);\r\n    console.log('inside updateData');\r\n    \r\n  }\r\n  close = () => {\r\n    this.setState({ open: false });\r\n    this.props.onUpdate(this.props.defaultValue);\r\n  \r\n  }\r\n  render() {\r\n    const fadeIn = this.state.open ? 'in' : '';\r\n    const display = this.state.open ? 'block' : 'none';\r\n    return (\r\n      <div className={ `modal fade ${fadeIn}` } id='myModal' role='dialog' style={ { display } }>\r\n        <div className='modal-dialog'>\r\n          <div className='modal-content'>\r\n            <div className='modal-body'>\r\n              <input\r\n                ref='inputRef'\r\n                className={ ( this.props.editorClass || '') + ' form-control editor edit-text' }\r\n                style={ { display: 'inline-block', width: '70%' } }\r\n                type='text'\r\n                value={ this.state.name }\r\n                onChange={ e => { this.setState({ name: e.currentTarget.value }); } } />\r\n            </div>\r\n            <div className='modal-footer'>\r\n              <button type='button' className='btn btn-primary' onClick={ this.updateData }>Save</button>\r\n              <button type='button' className='btn btn-default' onClick={ this.close }>Close</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass Table1 extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results : [],\r\n            rowClickedIndex : -1,\r\n            selectedRow : {},\r\n            showCreatePopup : false,\r\n            updateType:\"CREATE\",\r\n            selectedOption: null\r\n        };\r\n\r\n        this.fetchResults();\r\n        this.tableCallback = this.tableCallback.bind(this);\r\n         this.onRowClick = this.onRowClick.bind(this);\r\n         this.handleDeleteButtonClick = this.handleDeleteButtonClick.bind(this);\r\n         this.handleInsertButtonClick = this.handleInsertButtonClick.bind(this);\r\n         this.handleRowSelect = this.handleRowSelect.bind(this);\r\n         this.toggleCreatePopup = this.toggleCreatePopup.bind(this);\r\n         this.initializeNewData = this.initializeNewData.bind(this);\r\n         this.handleChange = this.handleChange.bind(this)\r\n         \r\n      }\r\n      \r\n       fetchResults(){ \r\n        fetch(\"http://localhost/project-details-backend/api/project/read_2.php?table=project_details\")\r\n        .then(response => response.json())\r\n        .then( p => {\r\n          console.log( 'inside fetchResults')\r\n          console.log( p.records);\r\n          this.setState({results : p.records }) ;\r\n          }).catch(error => {\r\n            console.log(error);\r\n        });\r\n\r\n        }\r\n\r\n        onRowClick(row,columnIndex,rowIndex) {\r\n          this.setState({rowClickedIndex:rowIndex})\r\n        }\r\n\r\n        handleRowSelect(row, isSelected, e) {\r\n        this.setState({selectedRow:row})\r\n        }\r\n\r\n       \r\n            \r\n\r\n        tableCallback(dataFromEdit){\r\n          console.log('inside table callback')\r\n          let newResults = [...this.state.results];\r\n          newResults[this.state.rowClickedIndex] = dataFromEdit\r\n          this.setState({results:newResults})\r\n      }\r\n\r\n      handleDeleteButtonClick = (onClick) => {\r\n       \r\n        fetch('http://localhost/project-details-backend/api/project/delete.php', {\r\n          method: 'post',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify(this.state.selectedRow)\r\n          \r\n        })\r\n        .then(res => res.text('detail has been logged')) // OR res.json()\r\n        .then(res => console.log('project has been deleted'))\r\n        console.log('This is my custom function for DeleteButton click event');\r\n        onClick();\r\n      }\r\n\r\n      createCustomDeleteButton = (onClick) => {\r\n        return (\r\n          <DeleteButton\r\n            btnText='Delete'\r\n            btnContextual='btn-warning'\r\n            className='my-custom-class'\r\n            btnGlyphicon='glyphicon-edit'\r\n            onClick={ () => this.handleDeleteButtonClick(onClick) }/>\r\n        );\r\n      }\r\n\r\n      handleInsertButtonClick = () => {\r\n        this.toggleCreatePopup();\r\n        \r\n\r\n        console.log('inside handle insert')\r\n        \r\n        \r\n      }\r\n\r\n      createCustomInsertButton = () => {\r\n        return (\r\n          <InsertButton\r\n            btnText='New'\r\n            btnContextual='btn-warning'\r\n            className='my-custom-class'\r\n            btnGlyphicon='glyphicon-plus'\r\n            onClick={ () => this.handleInsertButtonClick() }/>\r\n        );\r\n      }\r\n      \r\n      toggleCreatePopup() {\r\n        this.setState({\r\n          showCreatePopup: !this.state.showCreatePopup\r\n        });\r\n      }\r\n\r\n      initializeNewData(){\r\n        let temp = {}\r\n        let allKeys = Object.keys(this.state.results[0])\r\n\r\n        for(let i=0; i<allKeys.length; i++){\r\n          if(allKeys[i] != \"ID\"){\r\n            temp[allKeys[i]] = \"\";\r\n          }\r\n\r\n          }\r\n\r\n        return temp;\r\n      }\r\n\r\n      // hideFetchedId(){\r\n      //   let temp1 = {}\r\n\r\n      //   let allKeys = Object.keys(this.props.currentRow)\r\n      //   for(let i=0; i<allKeys.length; i++){\r\n      //     if(allKeys[i] != \"ID\"){\r\n      //       temp1[allKeys[i]] = this.props.currentRow;\r\n      //     }\r\n      //   }\r\n      //   return temp1;\r\n      // }\r\n\r\n      renderSizePerPageDropDown = props => {\r\n        return (\r\n          <div className='btn-group'>\r\n            {\r\n              [ 10, 25, 30 ].map((n, idx) => {\r\n                const isActive = (n === props.currSizePerPage) ? 'active' : null;\r\n                return (\r\n                  <button key={ idx } type='button' className={ `btn btn-info ${isActive}` } onClick={ () => props.changeSizePerPage(n) }>{ n }</button>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        );\r\n      }\r\n\r\n      handleChange = selectedOption => {\r\n        this.setState({ selectedOption });\r\n        console.log(`Option selected:`, selectedOption);\r\n      };\r\n               \r\n   render() {\r\n    \r\n    const { selectedOption } = this.state;\r\n    const cellEdit = {\r\n      mode: 'click' // click cell to edit\r\n    };\r\n    const createNameEditor = (onUpdate, props) => (<NameEditor onUpdate={ onUpdate } {...props}/>);\r\n\r\n    const options = {\r\n      onRowClick: this.onRowClick,\r\n      deleteBtn: this.createCustomDeleteButton,\r\n      insertBtn: this.createCustomInsertButton,\r\n      sizePerPageDropDown: this.renderSizePerPageDropDown\r\n    };\r\n\r\n    const selectRow = {\r\n      mode: 'checkbox',  // multi select\r\n      clickToSelect: true,\r\n      onSelect: this.handleRowSelect\r\n    };\r\n\r\n    return (\r\n      <div>\r\n      \r\n        <link rel=\"stylesheet\" href=\"https://npmcdn.com/react-bootstrap-table/dist/react-bootstrap-table.min.css\"></link>\r\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" integrity=\"sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu\" crossOrigin=\"anonymous\"></link>\r\n\r\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css\" integrity=\"sha384-6pzBo3FDv/PJ8r2KRkGHifhEocL+1X2rVCTTkUfGk7/0pbek5mMa1upzvWbrUbOZ\" crossOrigin=\"anonymous\"></link>\r\n\r\n     \r\n\r\n        <BootstrapTable class = 'table table-striped'  keyField = 'ID' data={this.state.results } selectRow={ selectRow } insertRow = {true} deleteRow={true} search = {true} searchPlaceholder='type to filter projects' cellEdit={cellEdit} pagination= {true} options={ options }>\r\n\r\n          \r\n          \r\n      \r\n        \r\n          \r\n        {this.state.results.length > 0 ? Object.keys(this.state.results[0]).map((column) => {\r\n          { if( column != \"edit\" && column != \"dropdown\") {\r\n            return(<TableHeaderColumn dataField={column} editable={false} > {column} </TableHeaderColumn>)\r\n          }else if( column == \"edit\"){\r\n            return (<TableHeaderColumn dataField='edit' dataFormat={ (cell, row) => <Edit rowData = {row}  callbackFromTable = {this.tableCallback }/>} editable={false} ></TableHeaderColumn>)\r\n          }else if( column == \"dropdown\"){\r\n            return (<TableHeaderColumn dataField='dropdown' dataFormat={ (cell, row) => <Dropdown/>} editable={false}>\r\n            DropDown\r\n          </TableHeaderColumn>)\r\n          }\r\n          \r\n           \r\n        }}) : <div></div>}  \r\n                     \r\n        </BootstrapTable>\r\n        {this.state.showCreatePopup ?\r\n          <Popup\r\n           text='Click \"Close Button\" to hide popup'\r\n           closePopup={this.toggleCreatePopup}\r\n           currentRow = {this.initializeNewData()}\r\n           //updatetype will either be update or create\r\n           updateType = {this.state.updateType}\r\n           callbackFromEdit ={this.tableCallback}\r\n          />\r\n          : null\r\n        }\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Table1;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table1 from './components/test';\nimport Table2 from './components/table2';\n\n \n\n \n \nclass Main extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <p className=\"Table-header\">Project Details</p>\n        {/* <Table1 data={fetchResult}/> */}\n        <Table1/>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n\n\n\n","import React, {Component} from 'react'\r\nimport {BootstrapTable, TableHeaderColumn} from \r\n       'react-bootstrap-table'\r\nimport './Table.css'\r\nimport './react-bootstrap-table-all.min.css'\r\n\r\n \r\n \r\nclass Table2 extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BootstrapTable data={this.props.data}>\r\n          <TableHeaderColumn isKey\r\n                             dataField='id'\r\n                             dataAlign='center'\r\n                             headerAlign=\"left\"\r\n                             width=\"30\"\r\n                             tdStyle={\r\n                                 {backgroundColor: 'green'}}>\r\n            ID\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='name'\r\n                             dataAlign='center'\r\n                             headerAlign=\"center\"\r\n                             width=\"20%\"\r\n                             thStyle={\r\n                                 {fontWeight: 'lighter', \r\n                                 color: 'red'}}>\r\n            Name\r\n          </TableHeaderColumn>\r\n          <TableHeaderColumn dataField='value'\r\n                             dataAlign='center'\r\n                             headerAlign=\"right\">\r\n            Value\r\n          </TableHeaderColumn>\r\n        </BootstrapTable>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n \r\nexport default Table2","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport X from './App';\n//import Tc from './table';\nimport * as serviceWorker from './serviceWorker';\nimport {Edit} from './components/edit';\n\n\n\n \n\n\n \n\nReactDOM.render(<X />, document.getElementById('root'));\n// ReactDOM.render(<Edit /> , document.getElementById('root2'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}